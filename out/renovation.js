// @flow

//
// Do not edit this file.
//


async function runApiCall(name: string, args :any[]) : Promise<any> {

}
/** 
 */
export type StageSearchResult = {  
    Ids: number[], 
}

/**
 */
async function Len() : Promise<any> {
   try {
        const jsonString = await runApiCall('Len', [])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of Len failed", error)
        throw error
   }
}


/**
 */
async function GetResult(index: number) : Promise<any> {
   try {
        const jsonString = await runApiCall('GetResult', [index])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetResult failed", error)
        throw error
   }
}


/** 
 */
export type StageIdsResult = {  
    Ids: number[], 
}

/**
 */
async function Len() : Promise<any> {
   try {
        const jsonString = await runApiCall('Len', [])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of Len failed", error)
        throw error
   }
}


/**
 */
async function GetItem(index: number) : Promise<any> {
   try {
        const jsonString = await runApiCall('GetItem', [index])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetItem failed", error)
        throw error
   }
}


/** 
 */
export type StageGroup = {  
    projects: string[],  
    stages: { [key: string]: ?StageIdsResult}, 
}

/**
 */
async function GetLen() : Promise<any> {
   try {
        const jsonString = await runApiCall('GetLen', [])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetLen failed", error)
        throw error
   }
}


/**
 */
async function GetItem(index: number) : Promise<any> {
   try {
        const jsonString = await runApiCall('GetItem', [index])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetItem failed", error)
        throw error
   }
}


/**
 */
async function GetIds(project: string) : Promise<any> {
   try {
        const jsonString = await runApiCall('GetIds', [project])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetIds failed", error)
        throw error
   }
}


/**
 */
async function GetProject(index: number) : Promise<any> {
   try {
        const jsonString = await runApiCall('GetProject', [index])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetProject failed", error)
        throw error
   }
}


/**
 */
async function GetProjectsLen() : Promise<any> {
   try {
        const jsonString = await runApiCall('GetProjectsLen', [])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetProjectsLen failed", error)
        throw error
   }
}


/**
 */
async function GetPhase(index: number) : Promise<any> {
   try {
        const jsonString = await runApiCall('GetPhase', [index])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetPhase failed", error)
        throw error
   }
}


/**
 */
async function GetPhasesLen() : Promise<any> {
   try {
        const jsonString = await runApiCall('GetPhasesLen', [])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetPhasesLen failed", error)
        throw error
   }
}


/**
 */
async function CancelSubscription(id: string) : Promise<any> {
   try {
        const jsonString = await runApiCall('CancelSubscription', [id])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CancelSubscription failed", error)
        throw error
   }
}


/**
 */
async function CreateTeRejectedStageIdsGroupObserver(id: string, sub: StageGroupSubscriptionReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreateTeRejectedStageIdsGroupObserver', [id, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreateTeRejectedStageIdsGroupObserver failed", error)
        throw error
   }
}


/**
 */
async function CreateStageListGroupedSubscription(id: string, status: string, sub: StageGroupSubscriptionReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreateStageListGroupedSubscription', [id, status, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreateStageListGroupedSubscription failed", error)
        throw error
   }
}


/**
 */
async function CreateWorkerActiveListSubscription(id: string, sub: StageIdsSubscriptionReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreateWorkerActiveListSubscription', [id, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreateWorkerActiveListSubscription failed", error)
        throw error
   }
}


/**
 */
async function CreateWorkerMarketListSubscription(id: string, sub: StageIdsSubscriptionReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreateWorkerMarketListSubscription', [id, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreateWorkerMarketListSubscription failed", error)
        throw error
   }
}


/**
 */
async function CreateStageListSubscription(id: string, status: string, sub: StageIdsSubscriptionReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreateStageListSubscription', [id, status, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreateStageListSubscription failed", error)
        throw error
   }
}


/**
 */
async function CreateProjectStatisticsSubscription(id: string, projectID: string, sub: ProjectStatisticsSubscriptionReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreateProjectStatisticsSubscription', [id, projectID, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreateProjectStatisticsSubscription failed", error)
        throw error
   }
}


/**
 */
async function CreateStageSubscription(id: string, stageID: number, sub: StageSubscriptionReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreateStageSubscription', [id, stageID, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreateStageSubscription failed", error)
        throw error
   }
}


/**
 */
async function CreateResidentialComplexSubscription(id: string, cmplxID: number, sub: ResidentialComplexSubscriptionReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreateResidentialComplexSubscription', [id, cmplxID, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreateResidentialComplexSubscription failed", error)
        throw error
   }
}


/**
 */
async function CreatePhaseSubscription(id: string, phaseID: number, sub: PhaseSubscriptionReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreatePhaseSubscription', [id, phaseID, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreatePhaseSubscription failed", error)
        throw error
   }
}


/**
 */
async function StageSearch(searchString: string, callback: StageSearchResponseCallback) : Promise<any> {
   try {
        const jsonString = await runApiCall('StageSearch', [searchString, callback])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of StageSearch failed", error)
        throw error
   }
}


/**
 */
async function CreateJobTemplateSubscription(id: string, jobTmpID: string, sub: JobTemplateReceiver) : Promise<any> {
   try {
        const jsonString = await runApiCall('CreateJobTemplateSubscription', [id, jobTmpID, sub])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of CreateJobTemplateSubscription failed", error)
        throw error
   }
}


/**
 */
async function GetJobTemplates(callback: JobTemplateResponseCallback) : Promise<any> {
   try {
        const jsonString = await runApiCall('GetJobTemplates', [callback])
        return JSON.parse(jsonString)
   } catch(error) {
        console.error("Call of GetJobTemplates failed", error)
        throw error
   }
}


