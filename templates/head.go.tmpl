package {{ .CodeList.Package }}

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/wrappers"
    "github.com/golang/protobuf/ptypes"
	"github.com/mitchellh/mapstructure"
	"gitlab.vmassive.ru/client"
	"{{ .CodeList.PathMap.ProtoRel }}"
	"gitlab.vmassive.ru/wand/goapi"
	"github.com/golang/protobuf/ptypes/timestamp"
	"strconv"
	"time"
	{{if .CodeList.Dev -}}
		"gitlab.vmassive.ru/wand/goapi/remgo"
	{{- end}}
)

type FuncCallback interface {
	OnSuccess(bytes []byte)
	OnError(err string)
}

type Event interface {
	OnEvent(eventName string, bytes []byte)
}

type EventCallback interface {
	OnEvent(bytes []byte)
}

type Subscription interface {
	Cancel()
}

type eventWrapper struct {
	event Event
}

func (eventer eventWrapper) OnEvent(eventName string, bytes []byte) {
	eventer.event.OnEvent(eventName, bytes)
}


func newEventWrapper(event Event) goapi.Event {
	return &eventWrapper{
		event: event,
	}
}

type funcCallbackWrapper struct {
	callback FuncCallback
}

func (caller funcCallbackWrapper) OnSuccess(bytes []byte) {
	caller.callback.OnSuccess(bytes)
}

func (caller funcCallbackWrapper) OnError(err string) {
	caller.callback.OnError(err)
}

func newFuncCallbackWrapper(callback FuncCallback) goapi.FuncCallback {
	return &funcCallbackWrapper{
		callback: callback,
	}
}

// Registry for all calls
var registry = goapi.NewRegistry()


type X_____xxxx struct { Val string }
func Ping____(number int) string {
	return strconv.Itoa(number)
}

func Ping____XXX(val interface{}) string {
	data := X_____xxxx{}
	mapstructure.Decode(val, &val)
	return data.Val
}

{{- if .CodeList.Dev }}
func main() {
	InitializeEx(
		"en",
		"./data",
		"https://retro.vmassive.ru/graphql",
		"wss://retro.vmassive.ru/subscriptions",
		true)
	hub := remgo.NewHub()
	remgo.ServeWs(&registry, hub, {{ .CodeList.Port }})
}
{{ end -}}

// CallMethod - call from client
func CallMethod(methodName string, args []byte, callback FuncCallback) {
	wrapper := newFuncCallbackWrapper(callback)
	registry.Call(methodName, args, wrapper)
}

func RegisterEventCallback(onEvent Event) {
	wrapper := newEventWrapper(onEvent)
	registry.RegisterEventCallback(wrapper)
}

func RemoveEventCallback() {
	registry.RegisterEventCallback(nil)
}

// Subscribe - Subscribe from client
func Subscribe(subscriptionName string, args []byte, callback FuncCallback) {
	fullSubName, err := registry.Subscribe(subscriptionName, args)
	if err == nil {
		w := &wrappers.StringValue{
			Value: fullSubName,
		}
		bytes, err := proto.Marshal(w)
		if err == nil {
			callback.OnSuccess(bytes)
			return
		}
	}

	callback.OnError(err.Error())
}

// Unsubscribe - Unsubscribe from client
func Unsubscribe(subscriptionName string) {
	registry.CancelSubscription(subscriptionName)
}
