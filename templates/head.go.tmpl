package {{.Package}}

import (
	"encoding/json"
	"log"
	"errors"
	"strconv"
	"net/http"
	"gitlab.vmassive.ru/wand/goapi"
	"{{ .SourcePackage }}"
	{{if .Dev}}"gitlab.vmassive.ru/wand/goapi/remgo"{{end}}
)

// Registry for all calls
var registry goapi.JsRegistry = goapi.NewJsRegistry()

{{if .Dev }}
func serveHome(w http.ResponseWriter, r *http.Request) {
	log.Println(r.URL)
	if r.URL.Path != "/" {
		http.Error(w, "Not found", http.StatusNotFound)
		return
	}
	if r.Method != "GET" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	http.ServeFile(w, r, "home.html")
}

func main() {
	hub := remgo.NewHub()
	go hub.Run(&registry)

	http.HandleFunc("/", serveHome)
	http.HandleFunc("/ws", func(w http.ResponseWriter, r *http.Request) {
		remgo.ServeWs(&registry, hub, w, r)
	})
	err := http.ListenAndServe("0.0.0.0:9009", nil)
	if err != nil {
		log.Fatal("ListenAndServe: ", err)
	}
}
{{end}}
// JsCallback the interface for any callbacks
type JsCallback interface {
	OnSuccess(json string)
	OnError(json string)
}

// JsEvent the interface for any events
type JsEvent interface {
	OnEvent(eventName string, json string)
}

type eventerSender struct {
	event		JsEvent
}

func newEventSender(event JsEvent) goapi.JsEvent {
	return &eventerSender{
		event: event,
	}
}

func (eventer eventerSender) OnEvent(eventName string, data interface{}) {
	log.Printf(" >> + << %#v", data)
	bytes, _ := json.Marshal(data)
	eventer.event.OnEvent(eventName, string(bytes))
}

type callbackCaller struct {
	callback JsCallback
}

func (caller callbackCaller) OnSuccess(data interface{}) {
	log.Printf(" >> + << %#v", data)
	bytes, _ := json.Marshal(data)
	caller.callback.OnSuccess(string(bytes))
}

func (caller callbackCaller) OnError(data interface{}) {
	bytes, _ := json.Marshal(data)
	caller.callback.OnError(string(bytes))
}

func newCaller(callback JsCallback) goapi.JsCallback {
	return &callbackCaller{
		callback: callback,
	}
}

// CallMethod - call from JS
func CallMethod(callData string, callback JsCallback) {
	methodCallData := make(map[string]interface{})
	json.Unmarshal([]byte(callData), &methodCallData)

	caller := newCaller(callback)
	registry.Call(methodCallData, caller)
}


func RegisterEventCallback(callback JsEvent) {
	registry.RegisterEventCallback(newEventSender(callback))
}

func RemoveEventCallback() {
	registry.RegisterEventCallback(nil)
}

// Subscribe - subsribe from JS
func Subscribe(callData string) {
	methodCallData := make(map[string]interface{})
	json.Unmarshal([]byte(callData), &methodCallData)

	registry.Subscribe(methodCallData)
}

// Subscribe - subsribe from JS
func Cancel(callData string) {
	methodCallData := make(map[string]interface{})
	registry.CancelSubscription(methodCallData)
}
