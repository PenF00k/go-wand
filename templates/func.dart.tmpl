{{- $ReturnTypeName := .GetReturnTypeName }}
{{- $FuncName := .Function.FunctionName }}
{{- $FuncNameLower := .Function.GetLowerCaseName }}
{{- if .Function.IsSubscription }}
Future<SubscriptionData> {{ $FuncNameLower }}({{ .GetSubscriptionArgsAsDartTypes }}) {
    try {
        SubscriptionBytesCallback callback = (Uint8List bytes) {
            typedCallback(bytes != null ? {{ $ReturnTypeName }}.fromBuffer(bytes) : null);
        };

        final args = {{ $FuncName }}Args(){{ .BindArgs }};

        return apiCaller.subscribe("{{ $FuncName }}", args, callback);
    } catch (e) {
        final es = Uri.decodeFull(e.toString());
        MaterialDartLib.debugPrint("Call of {{ $FuncNameLower }} failed with error: $es");
        throw(es);
    }
}
{{ else if .Function.IsPure }}
{{ else }}
Future<{{ $ReturnTypeName }}> {{ $FuncNameLower }}({{ .GetArgsAsDartTypes }}) async {
    try {
        final args = {{ $FuncName }}Args(){{ .BindArgs }};
        final Uint8List bytes = await apiCaller.callMethod("{{ $FuncName }}", args);
        if (bytes == null) return null;
        return {{ $ReturnTypeName }}.fromBuffer(bytes);
    } catch (e) {
        final es = Uri.decodeFull(e.toString());
        MaterialDartLib.debugPrint("Call of {{ $FuncNameLower }} failed with error: $es");
        throw(es);
    }
}
{{ end }}