
type {{ .Name }}Prop = {
  {{range $index, $item := .Props}}
  {{ $item.Name }}: {{ $item.Type }},{{end}}
}

export function with{{ .Name }}<Props: {} & {{ .Name }}Prop>(
  WrappedComponent : ComponentType<{{ .Name }}Prop & { {{ .VarName }} : {{ .Name }} }>
) : ComponentType<Props> {
  return class {{ .Name }}DataView extends Component<Props, *> {
    {{ if .Update }}subscription = undefined {{end}}

    constructor(props: Props) {
      super(props);
      this.state = {  {{ .VarName }} :  undefined }
    }

    componentDidMount() {
      {{ $length := len .Get.Params }}
      {{ if gt $length 0 }}
      const { {{range $index, $item := .Get.Params}}{{if $index}}, {{end}}{{ $item.Name }}{{end}}} = this.props
      {{ end }}

      {{ if .Get }}
      {{ .Get.Name }}({{range $index, $item := .Get.Params}}{{if $index}}, {{end}}{{ $item.Name }}{{end}})
        .then(this.onValue)
      {{ end }}
      {{ if .Update }}
      this.subscription = {{ .Update.Name  }}({{range $index, $item := .Get.Params}}{{ $item.Name }},{{end}}this.onValue)
      {{ end }}
    }

    onValue = ({{ .VarName }}: {{ .Name }}) => {
      this.setState({ {{ .VarName }} })
    }

    componentWillUnmount() {
     {{ if .Update }}cancelSubscriptionApiCall(this.subscription)
     {{ end }}
    }

    render() {
      const {  {{ .VarName }}  } = this.state;

      return <WrappedComponent
                {{ .VarName }}={  {{ .VarName }}  }
                {...this.props} />
    }
  }
}
