{{/*{{ $Params := .Params }}*/}}
{{/*{{ $ReturnType := .ReturnType }}*/}}

{{/*{{ define "gen_any" }}*/}}
    {{/*{{ if .IsPrimitivePointer }}*/}}
        {{/*{{ template "gen_primitive" . }}*/}}
    {{/*{{ else }}*/}}
        {{/*gen{{ .Name }}*/}}
    {{/*{{ end }}*/}}
{{/*{{ end }}*/}}

{{ define "gen_primitive" }}
    {{ $UpperCaseName := .ToUpperCamelCase -}}
    {{- $WrapperName := .GetActualTypeName true -}}

    {{ if .Pointer }}
    gen{{ $UpperCaseName }}Wrapper := func(data {{ .GetPrintableTypeName }}) *{{ $WrapperName }} {
        if data == nil {
            return nil
        }

        return &{{ $WrapperName }}{
            Value: *data,
        }
    }
    {{ else }}
    gen{{ $UpperCaseName }} := func(data {{ .Name }}) {{ .Name }} {
        return data
    }
    {{ end}}
{{ end }}

{{ define "gen_struct" }}
    {{ $UpperCaseName := .Name.ToUpperCamelCase -}}
    {{ $Package := "client" -}}
    {{ $ProtoPackageName := "proto_client" -}}

    gen{{ $UpperCaseName }} := func(data *{{ $Package }}.{{ .Name }}) *{{ $ProtoPackageName }}.{{ .Name }} {
        res := &{{ $ProtoPackageName }}.{{ .Name }}{
        {{ range $item := .Struct.Fields }}
            {{ if $item.IsExported }}
            {{ $item.GetUpperCamelCaseName "" "" }}: gen{{ $item.GetActualTypeName true }}(data.{{ $item.Name }}),
            {{ end }}
        {{ end }}
        }

        return res
    }
{{ end }}

{{ define "gen_slice" }}
    {{ $UpperCaseName := .Name.ToUpperCamelCase -}}
    {{- $Package := "client" -}}
    {{ $ProtoPackageName := "proto_client" -}}

    gen{{ .GetActualTypeName true }} := func(data {{ .GetPrintableTypeName }}) {{ .GetPrintableTypeName }} {
        res := make({{ .GetPrintableTypeName }}, 0, len(data))

        for _, v := range data {
            d := gen{{ $UpperCaseName }}(v)
            res = append(res, d)
        }

        return res
    }
{{ end }}

{{- if .Function.IsSubscription }}
func {{ .Function.FunctionName }}(argsBytes []byte, callback goapi.EventCallback) (goapi.Subscription, error) {
    args := {{ .CodeList.PackageMap.ProtoPackageName }}.{{ .Function.FunctionName }}Args{}

    if err := proto.Unmarshal(argsBytes, &args); err != nil {
        return nil, err
    }

    return {{ .Package }}.{{ .Function.FunctionName }}({{ range $item := .Function.Args }}{{ $item.GetUpperCamelCaseName "args." "go" }}, {{ end }}func(data {{ .GetEventTypeName }}) {
        {{ range $i, $item := .FlatFields -}}
            {{- if or $item.IsPrimitivePointer $item.IsPrimitive -}}
            {{- template "gen_primitive" $item -}}
            {{- else if $item.Struct -}}
            {{- template "gen_struct" $item -}}
            {{- else if $item.Slice -}}
            {{- template "gen_slice" $item -}}
            {{- end -}}
        {{- end -}}

        bytes, err := proto.Marshal(&dataProto)
        if err == nil {
            callback.OnEvent(bytes)
        }
    })
}
{{ end }}