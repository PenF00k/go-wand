{{ $Args := .Function.Args }}
{{ $ProtoPackageName := .CodeList.PackageMap.ProtoPackageName }}
{{ define "gen_field" }}
    {{ if .IsPrimitive -}}
        {{- template "gen_primitive" . -}}
    {{- else if .IsPrimitivePointer -}}
        {{- template "gen_wrapped_primitive" . -}}
    {{- else if .Struct -}}
        {{- template "gen_struct" . -}}
    {{- else if .Slice -}}
        {{- template "gen_slice" . -}}
    {{- else if .Pointer -}}
        {{- template "gen_pointer" . -}}
    {{- end -}}
{{ end }}

{{ define "gen_primitive" }}
    gen{{ .GetGenFuncName }} := func(data {{ .Name }}) {{ .GetWrapperName true }} {
        return {{ .WrapToProtoType "data" }}
    }
{{ end }}

{{ define "gen_wrapped_primitive" }}
    gen{{ .GetGenFuncName }} := func(data {{ .GetParamTypeName "" }}) {{ .GetWrapperName true }} {
        if data == nil {
            return nil
        }

        return {{ .GetWrapperName false }}{
            Value: {{ .WrapToProtoType "*data" }},
        }
    }
{{ end }}

{{ define "gen_struct" }}
    {{- $UpperCaseName := .Name.ToUpperCamelCase -}}
    {{- $Package := "client" -}}
    {{ $ProtoPackageName := "proto_client" -}}

    gen{{ $UpperCaseName }} := func(data {{ .GetParamTypeName $Package }}) {{ .GetReturnTypeName $ProtoPackageName true }} {
        res := {{ .GetReturnTypeName $ProtoPackageName false }}{
        {{ range $item := .Struct.Fields }}
            {{- if $item.IsExported -}}
            {{ $item.GetUpperCamelCaseName "" "" }}: gen{{ .Type.GetGenFuncName }}(data.{{ $item.Name }}),
            {{ end -}}
        {{ end }}
        }

        return res
    }
{{ end }}

{{ define "gen_slice" }}
    {{- $Package := "client" -}}
    {{- $ProtoPackageName := "proto_client" -}}

    gen{{ .GetGenFuncName }} := func(data {{ .GetParamTypeName $Package }}) {{ .GetReturnTypeName $ProtoPackageName true }} {
        res := make({{ .GetReturnTypeName $ProtoPackageName true }}, 0, len(data))

        for _, v := range data {
            {{ if .Slice.InnerType.Pointer -}}
            if v == nil {
                res = append(res, nil)
                continue
            }
            {{ end -}}
            d := gen{{ .Slice.InnerType.GetGenFuncName }}(v)
            res = append(res, d)
        }

        return res
    }
{{ end }}

{{ define "gen_pointer" }}
    {{- $Package := "client" -}}
    {{- $ProtoPackageName := "proto_client" -}}

    gen{{ .GetGenFuncName }} := func(data {{ .GetParamTypeName $Package }}) {{ .GetReturnTypeName $ProtoPackageName true }} {
        if data == nil {
            return nil
        }

        res := gen{{ .Pointer.InnerType.GetGenFuncName }}(*data)
        return res
    }
{{ end }}

{{- if .Function.IsSubscription }}
func {{ .Function.FunctionName }}(argsBytes []byte, callback goapi.EventCallback) (goapi.Subscription, error) {
    args := {{ $ProtoPackageName }}.{{ .Function.FunctionName }}Args{}

    if err := proto.Unmarshal(argsBytes, &args); err != nil {
        return nil, err
    }

    return {{ .Package }}.{{ .Function.FunctionName }}({{ range $item := .Function.Args }}{{ $item.GetUpperCamelCaseName "args." "go" }}, {{ end }}func(data {{ .GetEventTypeName }}) {
        {{ range $i, $item := .FlatFields -}}
            //{{ $i }}
            {{- template "gen_field" $item }}
        {{ end -}}

        bytes, err := proto.Marshal(gen{{ .GetLastFunction.GetGenFuncName }}(data))
        if err == nil {
            callback.OnEvent(bytes)
        }
    })
}

func getEventName{{ .Function.FunctionName }}(argsBytes []byte) (string, error) {
    args := {{ $ProtoPackageName }}.{{ .Function.FunctionName }}Args{}

    if err := proto.Unmarshal(argsBytes, &args); err != nil {
        return "", err
    }

    fullName := "{{ .Function.FunctionName }}" + fmt.Sprintf("
    {{- range $item := $Args }}:%v{{ end -}}
    ", {{- range $i, $item := $Args }}{{ $item.GetUpperCamelCaseName "args." "" -}}
    {{- if .NotIsLastField $Args $i }}, {{ end -}}
    {{- end -}})

    return fullName, nil
}
{{ else if .Function.IsPure }}

{{ else }}
func callAdapterFor{{ .Function.FunctionName }}(argsBytes []byte, callback goapi.FuncCallback) {
    args := {{ $ProtoPackageName }}.{{ .Function.FunctionName }}Args{}

    if err := proto.Unmarshal(argsBytes, &args); err != nil {
        callback.OnError(err.Error())
        return
    }

    res, err := {{ .Package }}.{{ .Function.FunctionName }}(
    {{- range $i, $item := $Args }}{{ $item.GetUpperCamelCaseName "args." "go" -}}
    {{- if .NotIsLastField $Args $i }}, {{- end -}}
    {{- end }})
    if err != nil {
        callback.OnError(err.Error())
    } else {
    {{ range $i, $item := .FlatFields -}}
        //{{ $i }}
        {{- template "gen_field" $item }}
    {{ end }}
        bytes, err := proto.Marshal(gen{{ .GetLastFunction.GetGenFuncName }}(res))
        if err == nil {
            callback.OnSuccess(bytes)
        } else {
            callback.OnError(err.Error())
        }
    }
}
{{ end }}