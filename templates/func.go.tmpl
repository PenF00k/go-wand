{{ $Params := .Params }}
{{ $Subscription := .Subscription }}
{{- if .Subscription }}
/**{{range $_, $item := .Comments}}
 * {{ $item }}{{end}}
 */
func {{ .Name }}(argsBytes []byte, callback goapi.EventCallback) (goapi.Subscription, error) {
   args := {{ .ProtoPackageName }}.{{ .Name }}Args{}

   if err := proto.Unmarshal(argsBytes, &args); err != nil {
      return nil, err
   }

   return {{ .Package }}.{{ .Name }}({{ range $item := $Params }}{{ $item.GetUpperCamelCaseName "args." "go" }}, {{ end }}func(data {{ .Package }}.{{ .Subscription.EventName }}) {
      dataProto := {{ .ProtoPackageName }}.{{ .Subscription.EventName }}{
         {{- range $item := $Subscription.Params }}
            {{ $item.GetUpperCamelCaseName "" "" }}: {{ $item.GetUpperCamelCaseName "data." "pro" }},
         {{- end }}
      }

      bytes, err := proto.Marshal(&dataProto)
      if err == nil {
         callback.OnEvent(bytes)
      }
   })
}

func getEventName{{ .Name }}(argsBytes []byte) (string, error) {
    args := {{ .ProtoPackageName }}.{{ .Name }}Args{}

	if err := proto.Unmarshal(argsBytes, &args); err != nil {
		return "", err
	}

	fullName := "{{ .Name }}" + fmt.Sprintf("
    {{- range $item := $Params }}:%v{{ end -}}
    ", {{- range $i, $item := $Params }}{{ $item.GetUpperCamelCaseName "args." "" -}}
        {{- if .NotIsLastField $Params $i }}, {{- end -}}
    {{- end -}})

	return fullName, nil
}
{{ else }}
func {{ .Name }}(argsBytes []byte, callback goapi.FuncCallback) {
    args := {{ .ProtoPackageName }}.{{ .Name }}Args{}

	if err := proto.Unmarshal(argsBytes, &args); err != nil {
		callback.OnError(err.Error())
        return
	}

	res, err := {{ .Package }}.{{ .Name }}(
    {{- range $i, $item := $Params }}{{ $item.GetUpperCamelCaseName "args." "go" -}}
        {{- if .NotIsLastField $Params $i }}, {{- end -}}
    {{- end }})
	if err != nil {
		callback.OnError(err.Error())
	} else {
        dataProto := {{ .ProtoPackageName }}.{{ .ReturnType }}{
            {{- range $item := $Params }}
                {{ $item.GetUpperCamelCaseName "" "" }}: {{ $item.GetUpperCamelCaseName "res." "pro" }},
            {{- end }}
        }

		bytes, err := proto.Marshal(&dataProto)
		if err == nil {
			callback.OnSuccess(bytes)
		} else {
            callback.OnError(err.Error())
        }
	}
}
{{ end }}