{{ $Params := .Params }}
{{ $ReturnType := .ReturnType }}

{{ define "array_builder" }}
    arr := data.{{ .FieldName }}
    {{ .FieldNameLowerCase }}s := make([]{{ .TypeName }}, len(arr))
    for i, v := range arr {
        {{ if true }}
        {{ end }}

        {{ .FieldNameLowerCase }}s[i] = v
    }

    {{ range $item := .Params }}
        {{ if $item.RichType.Primitive.IsPrimitive -}}
            _{{ $item.GetLowerCamelCaseName }} := {{ if $item.RichType.Primitive.IsPrimitive }}&wrappers.{{ end }}{{ $item.RichType.Primitive.WrapperTypeName }}{
            Value: {{ $item.GetUpperCamelCaseName "data." "pro" false }},
        {{- else -}}
            _{{ $item.GetLowerCamelCaseName }} := {{ if $item.RichType.Primitive.IsPrimitive }}&wrappers.{{ end }}{{ $item.RichType.Primitive.WrapperTypeName }}{
            {{ $item.GetUpperCamelCaseName "" "" false }}: {{ $item.GetUpperCamelCaseName "data." "pro" false }},
        {{ end }}
        }
    {{ end }}
{{ end }}

{{ define "build1" }}
    {{ range $item := .Params }}
        {{ if $item.RichType.Primitive.IsPrimitive -}}
            _{{ $item.GetLowerCamelCaseName }} := {{ if $item.RichType.Primitive.IsPrimitive }}&wrappers.{{ end }}{{ $item.RichType.Primitive.WrapperTypeName }}{
            Value: {{ $item.GetUpperCamelCaseName "data." "pro" false }},
        {{- else -}}
            _{{ $item.GetLowerCamelCaseName }} := {{ if $item.RichType.Primitive.IsPrimitive }}&wrappers.{{ end }}{{ $item.RichType.Primitive.WrapperTypeName }}{
            {{ $item.GetUpperCamelCaseName "" "" false }}: {{ $item.GetUpperCamelCaseName "data." "pro" false }},
        {{ end }}
        }
    {{ end }}
{{ end }}

{{ define "build2" }}
    {{- range $item := .Params }}
        {{ $item.GetUpperCamelCaseName "" "" false }}: _{{ $item.GetLowerCamelCaseName }},
    {{- end }}
    }

    bytes, err := proto.Marshal(&dataProto)
{{ end }}

{{ printf "// %+v\n" . }}

{{- if .Subscription }}
func {{ .Name }}(argsBytes []byte, callback goapi.EventCallback) (goapi.Subscription, error) {
    args := {{ .ProtoPackageName }}.{{ .Name }}Args{}

    if err := proto.Unmarshal(argsBytes, &args); err != nil {
        return nil, err
    }

    return {{ .Package }}.{{ .Name }}({{ range $item := $Params }}{{ $item.GetUpperCamelCaseName "args." "go" $item.RichType.Primitive.IsPrimitive }}, {{ end }}func(data *{{ .Package }}.{{ .ReturnType.EventName }}) {
    {{ range $item := .Params }}
        {{ .GetFieldString }}



        {{ if $item.RichType.Primitive.IsPrimitive -}}
            _{{ $item.GetLowerCamelCaseName }} := {{ if $item.RichType.Primitive.IsPrimitive }}&wrappers.{{ end }}{{ $item.RichType.Primitive.WrapperTypeName }}{
            Value: {{ $item.GetUpperCamelCaseName "data." "pro" false }},
        {{- else -}}
            _{{ $item.GetLowerCamelCaseName }} := {{ if $item.RichType.Primitive.IsPrimitive }}&wrappers.{{ end }}{{ $item.RichType.Primitive.WrapperTypeName }}{
            {{ $item.GetUpperCamelCaseName "" "" false }}: {{ $item.GetUpperCamelCaseName "data." "pro" false }},
        {{ end }}
        }
    {{ end }}
    dataProto := {{ .ProtoPackageName }}.{{ $ReturnType.EventName }}{
        {{ template "build2" $ReturnType }}

    if err == nil {
        callback.OnEvent(bytes)
    }
   })
}

func getEventName{{ .Name }}(argsBytes []byte) (string, error) {
    args := {{ .ProtoPackageName }}.{{ .Name }}Args{}

	if err := proto.Unmarshal(argsBytes, &args); err != nil {
		return "", err
	}

	fullName := "{{ .Name }}" + fmt.Sprintf("
    {{- range $item := $Params }}:%v{{ end -}}
    ", {{- range $i, $item := $Params }}{{ $item.GetUpperCamelCaseName "args." "" $item.RichType.Primitive.IsPrimitive -}}
        {{- if .NotIsLastField $Params $i }}, {{ end -}}
    {{- end -}})

	return fullName, nil
}
{{ else if $ReturnType }}
func callAdapterFor{{ .Name }}(argsBytes []byte, callback goapi.FuncCallback) {
    args := {{ .ProtoPackageName }}.{{ .Name }}Args{}

	if err := proto.Unmarshal(argsBytes, &args); err != nil {
		callback.OnError(err.Error())
        return
	}

	res, err := {{ .Package }}.{{ .Name }}(
    {{- range $i, $item := $Params }}{{ $item.GetUpperCamelCaseName "args." "go" false -}}
        {{- if .NotIsLastField $Params $i }}, {{- end -}}
    {{- end }})
	if err != nil {
		callback.OnError(err.Error())
	} else {
        dataProto := {{ .ProtoPackageName }}.{{ $ReturnType.EventName }}{
            {{- range $item := $ReturnType.Params }}
                {{ $item.GetUpperCamelCaseName "" "" false }}: {{ $item.GetUpperCamelCaseName "res." "pro" false }},
            {{- end }}
        }

		bytes, err := proto.Marshal(&dataProto)
		if err == nil {
			callback.OnSuccess(bytes)
		} else {
            callback.OnError(err.Error())
        }
	}
}
{{ else }}
func {{ .Name }}({{range $index, $item := $Params}}{{if $index}}, {{end}}{{ $item.Name }} {{if $item.RichType.Object }}{{ $item.Package}}.{{end}}{{ $item.Type }}{{end}})  {
   {{ .Package }}.{{ .Name }}({{range $index, $item := $Params}}{{if $index}}, {{end}}{{ $item.Name }}{{end}})
}
{{ end }}