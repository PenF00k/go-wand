{{/*{{ $Params := .Params }}*/}}
{{/*{{ $ReturnType := .ReturnType }}*/}}

{{ define "gen_primitive" }}
    gen{{ .TypeName }} := func(data {{ .TypeName }}) {{ if .IsPointer }}{{ .ProtoPackageName }}.{{ .TypeName }}{{ else }}.TypeName{{ end }} {
        {{ if .IsPointer }}
        return data
        {{ else }}
        return wrappers.
        {{ end }}
    }
{{ end }}

{{/*{{ define "gen_struct" }}*/}}
    {{/*gen{{ .TypeName }} := func(data {{ .Package }}.{{ .TypeName }}) {{ .ProtoPackageName }}.{{ .TypeName }} {*/}}
        {{/*str := {{ .ProtoPackageName }}.{{ .TypeName }}{*/}}
        {{/*{{ range $item := .Fields }}*/}}
            {{/*{{ if $item.IsPrimitive }}*/}}
            {{/*{{ template "gen_primitive" $item }}*/}}
            {{/*{{ else }}*/}}
            {{/*gen{{ $item.TypeName }}*/}}
            {{/*{{ end }}*/}}
        {{/*{{ end }}*/}}
        {{/*}*/}}

        {{/*return str*/}}
    {{/*}*/}}
{{/*{{ end }}*/}}

{{/*{{ define "gen_slice" }}*/}}
    {{/*gen{{ .TypeName }} := func(data []{{ .Package }}.{{ .TypeName }}) []{{ .ProtoPackageName }}.{{ .TypeName }} {*/}}
        {{/*var res []{{ .ProtoPackageName }}.{{ .TypeName }}*/}}

        {{/*res := make([]{{ .ProtoPackageName }}.{{ .TypeName }}, len(data))*/}}
        {{/*for i, v := range data {*/}}
            {{/*{{ if .IsPrimitive }}*/}}
                {{/*{{ template "gen_primitive" . }}*/}}
            {{/*{{ else }}*/}}
                {{/*gen{{ .TypeName }}*/}}
            {{/*{{ end }}*/}}
            {{/*res[i] = v*/}}
        {{/*}*/}}

        {{/*return arr*/}}
    {{/*}*/}}
{{/*{{ end }}*/}}

{{- if .Function.IsSubscription }}
func {{ .Function.FunctionName }}(argsBytes []byte, callback goapi.EventCallback) (goapi.Subscription, error) {
    args := {{ .CodeList.PackageMap.ProtoPackageName }}.{{ .Function.FunctionName }}Args{}

    if err := proto.Unmarshal(argsBytes, &args); err != nil {
        return nil, err
    }

    return {{ .Package }}.{{ .Function.FunctionName }}({{ range $item := .Function.Args }}{{ $item.GetUpperCamelCaseName "args." "go" }}, {{ end }}func(data {{ .GetEventTypeName }}) {
    {{ range $i, $item := .Function.Args }}
        {{ $i }}
        {{ $item }}
        {{/*{{ .GetFieldString }}*/}}


    {{ end }}
    {{/*dataProto := {{ .ProtoPackageName }}.{{ $ReturnType.EventName }}{*/}}
        {{/*{{ template "build2" $ReturnType }}*/}}

    if err == nil {
        callback.OnEvent(bytes)
    }
   })
}
{{ end }}