// Code generated by protoc-gen-go. DO NOT EDIT.
// source: debugwebsocket.proto

package debugwebsocket

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CallMethodArgs struct {
	MethodName           string   `protobuf:"bytes,1,opt,name=MethodName,proto3" json:"MethodName,omitempty"`
	Args                 []byte   `protobuf:"bytes,2,opt,name=Args,proto3" json:"Args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallMethodArgs) Reset()         { *m = CallMethodArgs{} }
func (m *CallMethodArgs) String() string { return proto.CompactTextString(m) }
func (*CallMethodArgs) ProtoMessage()    {}
func (*CallMethodArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8ed99056eb91777, []int{0}
}

func (m *CallMethodArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallMethodArgs.Unmarshal(m, b)
}
func (m *CallMethodArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallMethodArgs.Marshal(b, m, deterministic)
}
func (m *CallMethodArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallMethodArgs.Merge(m, src)
}
func (m *CallMethodArgs) XXX_Size() int {
	return xxx_messageInfo_CallMethodArgs.Size(m)
}
func (m *CallMethodArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_CallMethodArgs.DiscardUnknown(m)
}

var xxx_messageInfo_CallMethodArgs proto.InternalMessageInfo

func (m *CallMethodArgs) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *CallMethodArgs) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type SubscribeArgs struct {
	SubscriptionName     string   `protobuf:"bytes,1,opt,name=SubscriptionName,proto3" json:"SubscriptionName,omitempty"`
	Args                 []byte   `protobuf:"bytes,2,opt,name=Args,proto3" json:"Args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeArgs) Reset()         { *m = SubscribeArgs{} }
func (m *SubscribeArgs) String() string { return proto.CompactTextString(m) }
func (*SubscribeArgs) ProtoMessage()    {}
func (*SubscribeArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8ed99056eb91777, []int{1}
}

func (m *SubscribeArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeArgs.Unmarshal(m, b)
}
func (m *SubscribeArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeArgs.Marshal(b, m, deterministic)
}
func (m *SubscribeArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeArgs.Merge(m, src)
}
func (m *SubscribeArgs) XXX_Size() int {
	return xxx_messageInfo_SubscribeArgs.Size(m)
}
func (m *SubscribeArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeArgs.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeArgs proto.InternalMessageInfo

func (m *SubscribeArgs) GetSubscriptionName() string {
	if m != nil {
		return m.SubscriptionName
	}
	return ""
}

func (m *SubscribeArgs) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type UnsubscribeArgs struct {
	FullSubscriptionName string   `protobuf:"bytes,1,opt,name=FullSubscriptionName,proto3" json:"FullSubscriptionName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnsubscribeArgs) Reset()         { *m = UnsubscribeArgs{} }
func (m *UnsubscribeArgs) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeArgs) ProtoMessage()    {}
func (*UnsubscribeArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8ed99056eb91777, []int{2}
}

func (m *UnsubscribeArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnsubscribeArgs.Unmarshal(m, b)
}
func (m *UnsubscribeArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnsubscribeArgs.Marshal(b, m, deterministic)
}
func (m *UnsubscribeArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeArgs.Merge(m, src)
}
func (m *UnsubscribeArgs) XXX_Size() int {
	return xxx_messageInfo_UnsubscribeArgs.Size(m)
}
func (m *UnsubscribeArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeArgs.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeArgs proto.InternalMessageInfo

func (m *UnsubscribeArgs) GetFullSubscriptionName() string {
	if m != nil {
		return m.FullSubscriptionName
	}
	return ""
}

type Payload struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8ed99056eb91777, []int{3}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SubscriptionEvent struct {
	FullSubscriptionName string   `protobuf:"bytes,1,opt,name=FullSubscriptionName,proto3" json:"FullSubscriptionName,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionEvent) Reset()         { *m = SubscriptionEvent{} }
func (m *SubscriptionEvent) String() string { return proto.CompactTextString(m) }
func (*SubscriptionEvent) ProtoMessage()    {}
func (*SubscriptionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8ed99056eb91777, []int{4}
}

func (m *SubscriptionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionEvent.Unmarshal(m, b)
}
func (m *SubscriptionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionEvent.Marshal(b, m, deterministic)
}
func (m *SubscriptionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionEvent.Merge(m, src)
}
func (m *SubscriptionEvent) XXX_Size() int {
	return xxx_messageInfo_SubscriptionEvent.Size(m)
}
func (m *SubscriptionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionEvent proto.InternalMessageInfo

func (m *SubscriptionEvent) GetFullSubscriptionName() string {
	if m != nil {
		return m.FullSubscriptionName
	}
	return ""
}

func (m *SubscriptionEvent) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscribeResponse struct {
	FullSubscriptionName string   `protobuf:"bytes,1,opt,name=FullSubscriptionName,proto3" json:"FullSubscriptionName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8ed99056eb91777, []int{5}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetFullSubscriptionName() string {
	if m != nil {
		return m.FullSubscriptionName
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8ed99056eb91777, []int{6}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CallMethodArgs)(nil), "debugwebsocket.CallMethodArgs")
	proto.RegisterType((*SubscribeArgs)(nil), "debugwebsocket.SubscribeArgs")
	proto.RegisterType((*UnsubscribeArgs)(nil), "debugwebsocket.UnsubscribeArgs")
	proto.RegisterType((*Payload)(nil), "debugwebsocket.Payload")
	proto.RegisterType((*SubscriptionEvent)(nil), "debugwebsocket.SubscriptionEvent")
	proto.RegisterType((*SubscribeResponse)(nil), "debugwebsocket.SubscribeResponse")
	proto.RegisterType((*Empty)(nil), "debugwebsocket.Empty")
}

func init() { proto.RegisterFile("debugwebsocket.proto", fileDescriptor_a8ed99056eb91777) }

var fileDescriptor_a8ed99056eb91777 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x5b, 0x22, 0x12, 0x46, 0x44, 0x9d, 0x40, 0x24, 0x4d, 0x04, 0xdc, 0x13, 0xf1, 0x40,
	0x0c, 0x3e, 0x81, 0x11, 0xe4, 0x84, 0x9a, 0x1a, 0xbc, 0x78, 0xda, 0x85, 0x09, 0x12, 0x4a, 0xb7,
	0xe9, 0x6e, 0x35, 0x3c, 0x9d, 0xaf, 0x66, 0x5a, 0x10, 0xda, 0xb5, 0xc4, 0x84, 0xdb, 0xee, 0x3f,
	0x33, 0x7f, 0xe7, 0xef, 0x97, 0x85, 0xda, 0x94, 0x44, 0x34, 0xfb, 0x22, 0xa1, 0xe4, 0x64, 0x41,
	0xba, 0x1b, 0x84, 0x52, 0x4b, 0xac, 0x66, 0x55, 0xd6, 0x87, 0xea, 0x03, 0xf7, 0xbc, 0x11, 0xe9,
	0x0f, 0x39, 0xbd, 0x0f, 0x67, 0x0a, 0x9b, 0x00, 0xeb, 0xdb, 0x13, 0x5f, 0x52, 0xc3, 0x6e, 0xdb,
	0x9d, 0xb2, 0x9b, 0x52, 0x10, 0xe1, 0x28, 0xee, 0x6b, 0x14, 0xda, 0x76, 0xa7, 0xe2, 0x26, 0x67,
	0xf6, 0x0c, 0xa7, 0xaf, 0x91, 0x50, 0x93, 0x70, 0x2e, 0x28, 0x31, 0xb9, 0x81, 0xf3, 0x8d, 0x10,
	0xe8, 0xb9, 0xf4, 0x53, 0x56, 0x7f, 0xf4, 0x5c, 0xc3, 0x01, 0x9c, 0x8d, 0x7d, 0x95, 0xb1, 0xec,
	0x41, 0xed, 0x31, 0xf2, 0xbc, 0x3d, 0xb6, 0xb9, 0x35, 0xd6, 0x82, 0xd2, 0x0b, 0x5f, 0x79, 0x92,
	0x4f, 0xb1, 0x06, 0xc5, 0x37, 0xee, 0x45, 0xeb, 0xfe, 0x8a, 0xbb, 0xbe, 0xb0, 0x77, 0xb8, 0x48,
	0x0f, 0x0d, 0x3e, 0xc9, 0xd7, 0x87, 0x7c, 0x29, 0x0e, 0xd1, 0xe7, 0x9a, 0xff, 0x86, 0x88, 0xcf,
	0x6c, 0xb8, 0x35, 0x17, 0xe4, 0x92, 0x0a, 0xa4, 0xaf, 0xe8, 0xa0, 0x18, 0x25, 0x28, 0x0e, 0x96,
	0x81, 0x5e, 0xf5, 0xbe, 0x0b, 0x50, 0xec, 0xc7, 0x00, 0x71, 0x08, 0xb0, 0xe3, 0x86, 0xcd, 0xae,
	0x01, 0x3b, 0xcb, 0xd4, 0xb9, 0x34, 0xeb, 0x9b, 0xbf, 0xc2, 0x2c, 0x1c, 0x41, 0x79, 0xbb, 0x24,
	0x5e, 0x99, 0x7d, 0x19, 0xaa, 0x4e, 0xcb, 0x2c, 0x1b, 0x8c, 0x98, 0x85, 0x43, 0x38, 0x49, 0x89,
	0xf8, 0xdf, 0x84, 0x53, 0x37, 0x1b, 0x92, 0xa0, 0xcc, 0xc2, 0x31, 0xd4, 0x5d, 0x9a, 0xcd, 0x95,
	0xa6, 0x30, 0xa1, 0x12, 0x27, 0x12, 0x7c, 0xb2, 0xc0, 0xfc, 0x09, 0xe7, 0x7a, 0xcf, 0xea, 0x3b,
	0xae, 0xcc, 0xba, 0xb5, 0xc5, 0x71, 0xf2, 0x0c, 0xee, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x88,
	0x6c, 0x8b, 0x07, 0x1e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DebugClient is the client API for Debug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugClient interface {
	CallMethod(ctx context.Context, in *CallMethodArgs, opts ...grpc.CallOption) (*Payload, error)
	Subscribe(ctx context.Context, in *SubscribeArgs, opts ...grpc.CallOption) (*UnsubscribeArgs, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeArgs, opts ...grpc.CallOption) (*Empty, error)
	RegisterEventCallback(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Debug_RegisterEventCallbackClient, error)
}

type debugClient struct {
	cc *grpc.ClientConn
}

func NewDebugClient(cc *grpc.ClientConn) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) CallMethod(ctx context.Context, in *CallMethodArgs, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/debugwebsocket.Debug/CallMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Subscribe(ctx context.Context, in *SubscribeArgs, opts ...grpc.CallOption) (*UnsubscribeArgs, error) {
	out := new(UnsubscribeArgs)
	err := c.cc.Invoke(ctx, "/debugwebsocket.Debug/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Unsubscribe(ctx context.Context, in *UnsubscribeArgs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/debugwebsocket.Debug/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) RegisterEventCallback(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Debug_RegisterEventCallbackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Debug_serviceDesc.Streams[0], "/debugwebsocket.Debug/RegisterEventCallback", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugRegisterEventCallbackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_RegisterEventCallbackClient interface {
	Recv() (*SubscriptionEvent, error)
	grpc.ClientStream
}

type debugRegisterEventCallbackClient struct {
	grpc.ClientStream
}

func (x *debugRegisterEventCallbackClient) Recv() (*SubscriptionEvent, error) {
	m := new(SubscriptionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DebugServer is the server API for Debug service.
type DebugServer interface {
	CallMethod(context.Context, *CallMethodArgs) (*Payload, error)
	Subscribe(context.Context, *SubscribeArgs) (*UnsubscribeArgs, error)
	Unsubscribe(context.Context, *UnsubscribeArgs) (*Empty, error)
	RegisterEventCallback(*Empty, Debug_RegisterEventCallbackServer) error
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_CallMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallMethodArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).CallMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugwebsocket.Debug/CallMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).CallMethod(ctx, req.(*CallMethodArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugwebsocket.Debug/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Subscribe(ctx, req.(*SubscribeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugwebsocket.Debug/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Unsubscribe(ctx, req.(*UnsubscribeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_RegisterEventCallback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).RegisterEventCallback(m, &debugRegisterEventCallbackServer{stream})
}

type Debug_RegisterEventCallbackServer interface {
	Send(*SubscriptionEvent) error
	grpc.ServerStream
}

type debugRegisterEventCallbackServer struct {
	grpc.ServerStream
}

func (x *debugRegisterEventCallbackServer) Send(m *SubscriptionEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debugwebsocket.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallMethod",
			Handler:    _Debug_CallMethod_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Debug_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Debug_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterEventCallback",
			Handler:       _Debug_RegisterEventCallback_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "debugwebsocket.proto",
}
